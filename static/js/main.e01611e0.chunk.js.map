{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","split","length","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e01611e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set Title Here\",\r\n    aboutText: \"About text here\"\r\n}","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n        // console.log(\"Upper Case Was Clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to Uppercase', 'success')\r\n    }\r\n    const handleLoClick = () =>{\r\n        // console.log(\"Lower Case Was Clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to Lowercase', 'success')\r\n    }\r\n    const handleClearClick = () =>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert('Text Cleared', 'success')\r\n    }\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" value={text} onChange={handleOnChange} rows=\"8\" style={{backgroundColor: props.mode==='dark'?'#212529':'white', color: props.mode==='dark'?'white':'black'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert To Upper Case</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert To Lower Case</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.split(' ').length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(' ').length} Minutes to read.</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something to preview here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './Components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //Wheather dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#212529';\n      showAlert('Dark mode has been enabled', 'success');\n      document.title = 'TextUtils - Dark Mode'\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enabled', 'success')\n      document.title = 'TextUtils - Light Mode'\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n          {/* /users ---> Component 1\n          /Users/home/---> Component2 Use Exact for exact matching */}\n          {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} toggleMode={toggleMode} />\n          {/* </Route>\n        </Switch> */} \n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}